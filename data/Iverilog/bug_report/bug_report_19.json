{
    "URL": "https://github.com/steveicarus/iverilog/issues/539",
    "Summary": "void functions in always_comb blocks do not contribute to the sensitivity list",
    "Description": "I am trying to simulate the following generated SV module along with it's testbench:\nDesign: counter.sv\n//==============================================================================\n//\n// The code is generated by Intel Compiler for SystemC, version 1.3.31\n// see more information at https://github.com/intel/systemc-compiler\n//\n//==============================================================================\n\n//==============================================================================\n//\n// Module: Dut ()\n//\nmodule Dut // \"tb.dut_inst\"\n(\n    input logic clk,\n    input logic rstn,\n    output logic [3:0] counter,\n    output logic even\n);\n\n//------------------------------------------------------------------------------\n// Clocked THREAD: threadProc (dut.h:26:5) \n\n// Thread-local variables\nlogic [3:0] counter_next;\n\n// Next-state combinational logic\nalways_comb begin : threadProc_comb     // dut.h:26:5\n    threadProc_func;               //<   Comment this line for iverilog simulation to work\n    //counter_next = counter;      //< Uncomment this line for iverilog simulation to work\n    //counter_next = counter + 1;  //< Uncomment this line for iverilog simulation to work\nend\nfunction void threadProc_func;\n    counter_next = counter;\n    counter_next = counter + 1;\nendfunction\n\n// Syncrhonous register update\nalways_ff @(posedge clk or negedge rstn) \nbegin : threadProc_ff\n    if ( ~rstn ) begin\n        counter <= 0;\n    end\n    else begin\n        counter <= counter_next;\n    end\nend\n\n//------------------------------------------------------------------------------\n// Method process: methodProc (dut.h:35:5) \n\nalways_comb \nbegin : methodProc     // dut.h:35:5\n even = |(counter % 2);\nend\n\nendmodule\nDesign Testbench: tb_counter.sv\nmodule tb_counter();\n\nlogic clk;\nlogic rstn;\nlogic [3:0] counter;\nlogic even;\n\nDut DUT0(clk, rstn, counter, even);\n\nalways\n  #10  clk= ~clk;\n\n\ninitial\nbegin\n    rstn = 1;\n    clk = 0;\n    #20 rstn = 0;\n\n    #30 rstn = 1;\n\n    #500 $finish;\nend\n\ninitial begin\n        if ($test$plusargs(\"trace\") != 0) begin\n                $display(\"[%0t] Tracing to vlt_dump.vcd...\\n\", $time);\n                $dumpfile(\"logs/vlt_dump.vcd\");\n                $dumpvars;\n        end\n        $display(\"[%0t] Model Running...\\n\", $time);\nend\n\nendmodule\nGetting the following error while trying out build and run the simulation:\nIverilog Build command:\niverilog -g2012 counter.sv tb_counter.sv -o counter.aout\nOutput:\ncounter.sv:27: warning: always_comb process has no sensitivities.\nivl: ../net_scope.cc:500: const NetTaskDef* NetScope::task_def() const: Assertion `type_ == TASK' failed.\n\nIf one comments the line 28 in counter.sv and un-comment the lines 29-30 iverilog is able to extract sensitivity.\nHere are the details below for the iverilog build from source:\nIverilog Build info:iverilog -v\niverilog -v\nIcarus Verilog version 12.0 (devel) (s20150603-1147-g7ee7a483)\n\nCopyright (c) 2000-2021 Stephen Williams (steve@icarus.com)\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation; either version 2 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License along\n  with this program; if not, write to the Free Software Foundation, Inc.,\n  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n\niverilog: no source files.\n\nUsage: iverilog [-EiSuvV] [-B base] [-c cmdfile|-f cmdfile]\n                [-g1995|-g2001|-g2005|-g2005-sv|-g2009|-g2012] [-g<feature>]\n                [-D macro[=defn]] [-I includedir] [-L moduledir]\n                [-M [mode=]depfile] [-m module]\n                [-N file] [-o filename] [-p flag=value]\n                [-s topmodule] [-t target] [-T min|typ|max]\n                [-W class] [-y dir] [-Y suf] [-l file] source_file(s)\n\nSee the man page for details.\nLet me know in-case any more details are required.\nSeems to be related to #159 ."
}