{
    "URL": "https://github.com/steveicarus/iverilog/issues/556",
    "Summary": "Segmentation fault during OOB access to real array",
    "Description": "Hi, thanks for this very useful software! I encountered a strange segmentation fault which I have narrowed down to this code:\nmodule  interp1d_tb ();\n    reg clk;\n\n    initial begin\n        clk = 0;\n\n        forever begin\n            #1;\n            clk = ~clk;\n        end\n    end\n\n\n    real lut_values[1:0];\n    assign lut_values[0] = 1;\n    assign lut_values[1] = 2;\n\n    wire[8-1:0] lut2_addr;\n    reg[8-1:0] lut2_out;\n\n    always @(posedge clk) begin\n        lut2_out <= lut_values[lut2_addr];\n    end\n\n    // Check output\n    always begin\n        #1 // Must be at least 1\n\n        $finish();\n    end\n\n\n    // Stage 3 (LUT)\n    assign lut2_addr = 3; \nendmodule\nwhen run using\niverilog -g2012 segfault_tb.sv -o build/buggy.vvp && ./build/buggy.vvp\n\nThis is about as minimal of an example as I can create. It looks like this is\ncaused by indexing out of bounds in the lut_values array which wasn't very\nobvious in a bigger example.\nThe bug is not triggered if lut2_addr is 2 which is still OOB. In that case, I get\nvvp: array.cc:730: double __vpiArray::get_word_r(unsigned int): Assertion `vsig' failed.\nzsh: abort (core dumped)  ./build/buggy.vvp\n\nMoving the 3 directly to the correctly gives an OOB warning and no segmentation fault\nChanging the type of the lut_values array to integer gives no warnings, and\nno assertion errors.\nThis is with icarus and vvp version\nIcarus Verilog version 11.0 (stable) (v11_0)\n\nfrom the arch repository.\nI will see if I can reproduce this in the git version when I get more time this week\nGithub does not seem to allow uploads of core dumps. If that would be useful, let me know if I should upload it."
}