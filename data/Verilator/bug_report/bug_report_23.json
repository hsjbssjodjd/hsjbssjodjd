{
    "URL": "https://github.com/verilator/verilator/issues/4059",
    "Summary": "Incorrect evaluation of combinational circuit with const-bit-op-tree",
    "Description": "I have a simple combinational circuit (generated by yosys), where one bit is evaluated incorrectly if verilator optimisation is turned on. I am attaching a SystemVerilog file and a minimal C++ testbench showing the problem.\n>> lsb_release -d\nDescription:\tUbuntu 22.10\n\n>> /usr/local/bin/verilator --version\nVerilator 5.009 devel rev v5.008-81-g277bd67f7\n\n>> /usr/local/bin/verilator -Wall -O3 --trace --trace-underscore --prefix DUT --top-module mymodule mymodule.sv --cc --exe --build testbench.cpp && ./obj_dir/DUT\n[...]\nExpected  0xc4\nGot       0xc5\n\nThe problem apparently arises in this line of the SystemVerilog file:\nassign result_o[0] = ~(_006_ ^ _013_);\n\nLooking at the generated trace file it can be seen that signal _006_ is 0 and signal _013_ is 1, therefore result_o[0] should be 0, but it is instead 1. If optimisation flag -O3 is replaced by -O0 the result is calculated correctly.\nmodule_and_testbench.tar.gz"
}