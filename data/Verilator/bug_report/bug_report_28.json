{
    "URL": "https://github.com/verilator/verilator/issues/3959",
    "Summary": "Fix WIDTH to point at proper subtract fileline",
    "Description": "How to reproduce:\nIf you lint the attached file, which I reproduce below, you will get the following error:\n%Warning-WIDTH: bugreport.v:7:31: Operator SUB expects 32 bits on the LHS, but LHS's VARREF 'UROM_DEPTH' generates 11 bits.\n                                : ... In instance uRom\n    7 |     reg [UROM_WIDTH-1:0] uRam[UROM_DEPTH];      \n      |                               ^~~~~~~~~~\n                ... For warning description see https://verilator.org/warn/WIDTH?v=5.006\n                ... Use \"/* verilator lint_off WIDTH */\" and lint_on around source to disable this message.\n%Error: Exiting due to 1 warning(s)\n\nBut this warning is about a non-existing SUB operation and a non-existing LHS. Making UROM_DEPTH=1024; fixes the warning, but I don't think the warning should have ever been there.\ninput file:\nlocalparam UADDR_WIDTH = 4'd10;\nlocalparam UROM_WIDTH = 5'd17;\nlocalparam UROM_DEPTH = 11'd1024;\n\n\nmodule uRom( input clk, input [UADDR_WIDTH-1:0] microAddr, output logic [UROM_WIDTH-1:0] microOutput);\n    reg [UROM_WIDTH-1:0] uRam[UROM_DEPTH];      \n    initial begin\n        $readmemb(\"microrom.mem\", uRam);\n    end\n    \n    always @( posedge clk) \n        microOutput <= uRam[ microAddr];\nendmodule\n\nbugreport.v.zip\nWhat 'verilator --version' are you using?  Did you try it with the git master version?\nTested with 5.06 and git master.\nWhat OS and distribution are you using?\nUbuntu mate 20.04 LTS\nMay we assist you in trying to fix this in Verilator yourself?\nI cannot help with software development"
}