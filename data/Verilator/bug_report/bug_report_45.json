{
    "URL": "https://github.com/verilator/verilator/issues/3610",
    "Summary": "When dumping VCD files, calling trace() after open() causes segmentation fault.",
    "Description": "In the example, to dump the vcd file, one need:\ntopp->trace(tfp, 99); // Trace 99 levels of hierarchy\ntfp->open(\"obj_dir/t_trace_ena_cc/simx.vcd\");\nHowever, if we reverse the two lines (i.e., call open() then trace()), the program crashes with an segmentation fault (when calling dump() later), which is hard to locate the reason.\ntfp->open(\"obj_dir/t_trace_ena_cc/simx.vcd\");\ntopp->trace(tfp, 99); // Trace 99 levels of hierarchy\nI am not sure whether this behaviour is documented somewhere.\nA minimal reproducible example is:\nmodule Dummy(input clk);\nendmodule\n#include \"VDummy.h\"\n#include <verilated.h>\n#include <verilated_vcd_c.h>\nusing namespace std;\n\nint main(int argc, char **argv) {\n        VerilatedContext ctx;\n        VerilatedVcdC tfp;\n        VDummy dut;\n        ctx.traceEverOn(true);\n        tfp.open(\"dump.vcd\"); // Error! shall put to the next line!\n        dut.trace(&tfp, 99); // Error!\n        tfp.dump(0);\n        tfp.close();\n        return 0;\n}\nverilator --cc --trace --build --exe main.cpp Dummy.sv\n./out_dir/VDummy\nI think it would be easy to fix by checking tfp->isOpen() in V3EmitC.cpp."
}