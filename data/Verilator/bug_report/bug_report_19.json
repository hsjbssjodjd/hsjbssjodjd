{
    "URL": "https://github.com/verilator/verilator/issues/4111",
    "Summary": "String substr() method returns wrong result under very specifc circumstances",
    "Description": "I have the following code:\n// file test.sv\n\nclass string_utils;\n\n  typedef string array_of_string[];\n\n\n  static function array_of_string split_by_dash(string s);\n    string parts[$];\n    int last_char_position = -1;\n\n    for (int i = 0; i < s.len(); i++) begin\n      if (i == s.len()-1) begin\n        parts.push_back(s.substr(last_char_position+1, i));\n      end\n\n      // Can't remove this, because then the code will work\n      if (string'(s[i]) == \"-\") begin\n        parts.push_back(s.substr(last_char_position+1, i-1));\n        last_char_position = i;\n      end\n    end\n\n    return parts;\n  endfunction\n\nendclass\n\n\nclass filter;\n\n  local static filter single_instance;\n\n\n  static function filter get();\n    if (single_instance == null)\n      single_instance = new();\n    return single_instance;\n  endfunction\n\n\n  local function new();\n    string parts[] = string_utils::split_by_dash(\"*\");\n    \n    if (parts.size() != 1)\n      $fatal(0, \"Expected single element\");\n    if (parts[0] != \"*\")\n      $fatal(0, \"Expected element to be *\");\n  endfunction\n\nendclass\n\n\nconst filter _filter = filter::get();\n\nWhen I compile and run with verilator --binary test.sv && obj_dir/Vtest I get:\n[0] %Fatal: test.sv:46: Assertion failed in TOP.$unit.filter.new: Expected element to be *\n%Error: test.sv:46: Verilog $stop\nAborting...\n\nThe code essentially tries to split the single character string \"*\" by dashes, which should just return an array containing \"*\". This generally works, I've tried to test split_by_dash() (more specifically the function I extracted it from) in isolation and I got the expected result. The function uses substr() to compute the parts. In this concrete case, s.substr(last_char_position+1, i) (which \"expands\" to \"*\".substr(-1+1, 0)) returns an empty string, instead of the string itself.\nThis is the smallest code I could manage that reproduces the issue. Removing the dead code (marked with the comment), which compares against the dash, leads to the first substr working as expected (i.e. returning \"*\"). Moving the code from new() into the static get() function causes split_by_dash() to return an empty array (though I didn't debug this thoroughly and might warrant an own issue). What I'm trying to say is that I don't see how to make the code much smaller."
}